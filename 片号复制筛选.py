# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'untitled.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import os
import time
import threading
import shutil
import re
class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 600)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(220, 240, 93, 28))
        self.pushButton.setObjectName("pushButton")
        self.pushButton.clicked.connect(self.click1)
        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setGeometry(QtCore.QRect(370, 240, 93, 28))
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_2.clicked.connect(self.click2)
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(90, 50, 161, 16))
        self.label.setObjectName("label")
        self.plainTextEdit = QtWidgets.QPlainTextEdit(self.centralwidget)
        self.plainTextEdit.setGeometry(QtCore.QRect(260, 40, 331, 31))
        self.plainTextEdit.setObjectName("plainTextEdit")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(90, 140, 171, 16))
        self.label_2.setObjectName("label_2")
        self.plainTextEdit_2 = QtWidgets.QPlainTextEdit(self.centralwidget)
        self.plainTextEdit_2.setGeometry(QtCore.QRect(260, 130, 331, 31))
        self.plainTextEdit_2.setObjectName("plainTextEdit_2")
        self.plainTextEdit_3 = QtWidgets.QPlainTextEdit(self.centralwidget)
        self.plainTextEdit_3.setGeometry(QtCore.QRect(140, 310, 481, 221))
        self.plainTextEdit_3.setObjectName("plainTextEdit_3")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.pushButton.setText(_translate("MainWindow", "缓存文件"))
        self.pushButton_2.setText(_translate("MainWindow", "开始检测"))
        self.label.setText(_translate("MainWindow", "请输入想要检测的目录："))
        self.label_2.setText(_translate("MainWindow", "请选择文件的目的目录："))

    def click1(self):
        t1 = threading.Thread(target=self.clickhc,args=())
        t1.start()
        
    def clickhc(self):
        filename = 'out.txt'
        pattern = re.compile('.*DC.*')
        if os.path.exists(filename):
            #message = 'OK, the "%s" file exists.'
            self.logger("日志文件已存在，正在缓存")
        else:
            #message = "Sorry, I cannot find the '%s' file..and I create it."
            self.logger("日志文件不存在，创建日志文件，正在缓存")
            a = open('out.txt', 'a')
            a.close()
        path = self.plainTextEdit.toPlainText()
        for root, dir, files in os.walk(path):
            for file in files:
                if re.match(pattern,file):
                    full_path = os.path.join(root, file)
                    # print(full_path)
                    # print(file)
                    mtime = os.stat(full_path).st_mtime
                    file_modify_time = time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(mtime))
                    # file_modify_time 是修改的时间
                    f = open("out.txt", 'a')
                    # f.write(r"{0} 修改时间是: {1}\n".format(full_path,file_modify_time))
                    f.write(full_path + ' ' + file_modify_time + '\n')
                    f.close()
            '''
            for dirs in dir:
                dirs = root+'\\'+dirs
                for dirss in os.listdir(dirs):
                    dirss=dirs+'\\'+dirss
                    mtime = os.stat(dirss).st_mtime
                    file_modify_time = time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(mtime))
                    # file_modify_time 是修改的时间
                    f = open("out.txt", 'a')
                    # f.write(r"{0} 修改时间是: {1}\n".format(full_path,file_modify_time))
                    f.write(dirss + ' ' + file_modify_time + '\n')
                    f.close()
                    self.logger('--------')
                    self.logger(dirss)
            '''
        self.logger("缓存完成")
    def logger(self, string, end='\n'):
        self.plainTextEdit_3.insertPlainText(str(string) + end)

    def click2(self):
        t2 = threading.Thread(target=self.clickcopy, args=())
        t2.start()

    def clickcopy(self):
        path = self.plainTextEdit.toPlainText()
        path2 = self.plainTextEdit_2.toPlainText()
        pattern = re.compile('.*DC.*')
        while (True):
            for root, dir, files in os.walk(path):
                for file in files:
                    if re.match(pattern,file):
                        full_path = os.path.join(root, file)
                        # print(full_path)
                        # print(file)
                        mtime = os.stat(full_path).st_mtime
                        file_modify_time = time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(mtime))
                        # file_modify_time 是修改的时间
                        f = open("out.txt", 'r')
                        numb = len(f.readlines())
                        f.close()
                        f = open("out.txt", 'r')
                        x = 0
                        for line in f.readlines():
                            a = line
                            a = a.split(' ', 1)
                            a[1] = a[1].replace("\n", '')
                            if full_path == a[0]:
                                if a[1] == file_modify_time:

                                    self.logger('跳过' + full_path)
                                    break
                                else:
                                    shutil.copy(full_path, path2)
                                    self.logger(full_path)
                                    self.logger("已复制文件")
                            else:
                                x += 1
                            if x == numb:
                                shutil.copy(full_path, path2)
                                self.logger(full_path)
                                self.logger("已复制文件")
                                break
                        f.close()
            time.sleep(5)


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
